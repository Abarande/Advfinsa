// antecedentes_puppeteer_hcaptcha_fixed.js
//
// Uso:
//    node antecedentes_puppeteer_hcaptcha_fixed.js <CEDULA>
// Ejemplo:
//    node antecedentes_puppeteer_hcaptcha_fixed.js 1309022935
//
// Aseg√∫rate de tener en .env:
//    TWOCAPTCHA_KEY=TU_API_KEY_2CAPTCHA
//
// Librer√≠as necesarias:
//    npm install puppeteer-extra puppeteer-extra-plugin-recaptcha node-fetch dotenv

require("dotenv").config();
const puppeteer     = require("puppeteer-extra");
const RecaptchaPlugin = require("puppeteer-extra-plugin-recaptcha");
const fetch         = require("node-fetch"); // v2
const fs            = require("fs");
const path          = require("path");

const API_KEY = process.env.TWOCAPTCHA_KEY;
if (!API_KEY) {
  console.error("‚ùå Debes definir TWOCAPTCHA_KEY en tu .env");
  process.exit(1);
}

// Para capturas de pantalla en modo depuraci√≥n (activar DEPURAR=1 en variables de entorno)
const DEPURAR = process.env.DEPURAR === "1";
async function snap(page, label) {
  if (!DEPURAR) return;
  const carpeta = path.join(__dirname, "debug_screenshots");
  await fs.promises.mkdir(carpeta, { recursive: true });
  const archivo = path.join(carpeta, `${Date.now()}_${label}.png`);
  await page.screenshot({ path: archivo, fullPage: true });
  console.log(`üñºÔ∏è Screenshot guardado: ${archivo}`);
}

async function main() {
  if (process.argv.length < 3) {
    console.log("Uso: node antecedentes_puppeteer_hcaptcha_fixed.js <CEDULA>");
    process.exit(1);
  }
  const CEDULA = process.argv[2].trim();
  const PAGE_URL = "https://certificados.ministeriodelinterior.gob.ec/gestorcertificados/antecedentes/";

  // 1) Iniciar Puppeteer-extra
  const browser = await puppeteer.launch({
    headless: false,
    ignoreHTTPSErrors: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"]
  });
  const [page] = await browser.pages();

  // 2) Ir a la p√°gina principal
  console.log("üîé Navegando a la p√°gina principal de Antecedentes‚Ä¶");
  await page.goto(PAGE_URL, { waitUntil: "networkidle2", timeout: 120000 });
  await new Promise(r => setTimeout(r, 1000));  // <--- Reemplazo aqu√≠
  await snap(page, "antes-gate");

  // 3) Esperar al <iframe id="main-iframe"> (Incapsula gate)
  console.log("‚è≥ Buscando iframe#main-iframe (Incapsula)‚Ä¶");
  let outerHandle;
  try {
    outerHandle = await page.waitForSelector("iframe#main-iframe", { timeout: 15000 });
  } catch {
    console.error("‚ùå No apareci√≥ el iframe#main-iframe. Quiz√° el gate ya no est√° activo.");
    await browser.close();
    process.exit(1);
  }

  // 4) Obtener contentFrame() del iframe
  const incapsulaFrame = await outerHandle.contentFrame();
  if (!incapsulaFrame) {
    console.error("‚ùå No pude acceder a contentFrame() del iframe Incapsula.");
    await browser.close();
    process.exit(1);
  }

  // 5) Dentro del incapsulaFrame, esperar el <div class="h-captcha" data-sitekey="...">
  console.log("üîë Buscando div.h-captcha[data-sitekey]‚Ä¶");
  let sitekey;
  try {
    await incapsulaFrame.waitForSelector("div.h-captcha[data-sitekey]", { timeout: 15000 });
    sitekey = await incapsulaFrame.$eval("div.h-captcha[data-sitekey]", el => el.getAttribute("data-sitekey"));
    console.log("‚úÖ hCaptcha sitekey =", sitekey);
  } catch {
    console.error("‚ùå No encontr√© el div.h-captcha con data-sitekey en 15 s.");
    await browser.close();
    process.exit(1);
  }

  // 6) Esperar a que el iframe de hCaptcha est√© cargado
  console.log("‚è≥ Esperando a que el <iframe> de hCaptcha est√© listo‚Ä¶");
  try {
    await incapsulaFrame.waitForSelector("div.h-captcha iframe", { visible: true, timeout: 10000 });
    console.log("‚úÖ El iframe de hCaptcha est√° visible en el DOM.");
  } catch {
    console.error("‚ùå El <iframe> de hCaptcha NO apareci√≥ dentro de la div.h-captcha.");
    await browser.close();
    process.exit(1);
  }

  // 7) Enviar sitekey + pageurl a 2Captcha
  console.log("üì° Enviando sitekey y pageUrl a 2Captcha‚Ä¶");
  let inJSON;
  try {
    const respIn = await fetch(
      `https://2captcha.com/in.php?key=${API_KEY}` +
      `&method=hcaptcha&sitekey=${encodeURIComponent(sitekey)}` +
      `&pageurl=${encodeURIComponent(PAGE_URL)}&json=1`
    );
    inJSON = await respIn.json();
  } catch (err) {
    console.error("‚ùå Error de red al enviar a 2Captcha:", err);
    await browser.close();
    process.exit(1);
  }
  if (!inJSON || inJSON.status !== 1) {
    console.error("‚ùå 2Captcha devolvi√≥ error al enviar:", inJSON);
    await browser.close();
    process.exit(1);
  }
  const captchaId = inJSON.request;
  console.log("üÜî 2Captcha returned captchaId =", captchaId);

  // 8) Polling a 2Captcha hasta 120 s
  console.log("‚è≥ Esperando a que 2Captcha resuelva (m√°x ~120 s)‚Ä¶");
  let token = null;
  for (let i = 1; i <= 24; i++) {
    await new Promise(r => setTimeout(r, 5000));  // <--- Reemplazo aqu√≠
    let resJSON = null;
    try {
      const respRes = await fetch(
        `https://2captcha.com/res.php?key=${API_KEY}&action=get&id=${captchaId}&json=1`
      );
      resJSON = await respRes.json();
    } catch (err) {
      console.warn(`‚ö†Ô∏è [Intento ${i}] Error al poll a 2Captcha:`, err);
      continue;
    }
    if (!resJSON) {
      console.warn(`‚ö†Ô∏è [Intento ${i}] 2Captcha devolvi√≥ JSON vac√≠o`);
      continue;
    }
    if (resJSON.status === 0 && resJSON.request === "CAPCHA_NOT_READY") {
      console.log(`   ‚Üí Todav√≠a no est√° listo (${i}/24)‚Ä¶`);
      continue;
    }
    if (resJSON.status === 1) {
      token = resJSON.request;
      console.log("‚úÖ Token de hCaptcha recibido:", token);
      break;
    }
    console.error(`‚ùå [Intento ${i}] 2Captcha devolvi√≥ error:`, resJSON);
    break;
  }
  if (!token) {
    console.error("‚ùå Timeout esperando token de hCaptcha. Saliendo.");
    await browser.close();
    process.exit(1);
  }

  // 9) Inyectar token en textarea[name="h-captcha-response"] dentro del incapsulaFrame
  console.log("‚úçÔ∏è Inyectando token en textarea[name='h-captcha-response']‚Ä¶");
  await incapsulaFrame.evaluate(resolvedToken => {
    let ta = document.querySelector("textarea[name='h-captcha-response']");
    if (!ta) {
      ta = document.createElement("textarea");
      ta.name = "h-captcha-response";
      ta.style.display = "none";
      document.body.appendChild(ta);
    }
    ta.value = resolvedToken;
    ta.innerText = resolvedToken;
    ta.dispatchEvent(new Event("change", { bubbles: true }));
  }, token);

  // 10) Click en el checkbox de hCaptcha / ejecutar hcaptcha.execute()
  console.log("üñ±Ô∏è Haciendo click en el checkbox de hCaptcha o invocando hcaptcha.execute()");
  try {
    await incapsulaFrame.click("div.h-captcha", { force: true });
  } catch {
    console.warn("‚ö†Ô∏è No pude hacer click directo en div.h-captcha. Intento hcaptcha.execute().");
  }
  await incapsulaFrame.evaluate(() => {
    if (window.hcaptcha && typeof window.hcaptcha.execute === "function") {
      try { window.hcaptcha.execute(); } catch (_) { }
    }
  });

  // 11) Esperar a que el gate de Incapsula desaparezca (iframe#main-iframe oculto)
  console.log("‚è≥ Esperando a que desaparezca iframe#main-iframe (gate)...");
  try {
    await page.waitForSelector("iframe#main-iframe", { hidden: true, timeout: 180000 });
    console.log("‚úÖ El iframe#main-iframe ya no est√° visible.");
  } catch {
    console.error("‚ùå Timeout esperando a que desaparezca iframe#main-iframe.");
    await browser.close();
    process.exit(1);
  }
  await snap(page, "gate-desbloqueado");

  // 12) Clicar ‚ÄúAceptar‚Äù (si existe)
  console.log("üî≤ Buscando bot√≥n ‚ÄúAceptar‚Äù y haciendo click si aparece‚Ä¶");
  try {
    await page.waitForFunction(
      () => Array.from(document.querySelectorAll("button")).some(b => b.innerText.trim() === "Aceptar"),
      { timeout: 10000 }
    );
    const botones = await page.$$("button");
    for (const btn of botones) {
      const txt = await page.evaluate(e => e.innerText.trim(), btn);
      if (txt === "Aceptar") {
        await btn.click({ force: true });
        console.log("‚úÖ Hice click en ‚ÄúAceptar‚Äù.");
        break;
      }
    }
    // Peque√±a pausa para que desaparezca el modal
    await new Promise(r => setTimeout(r, 500));  // <--- Reemplazo aqu√≠
  } catch {
    console.log("‚ÑπÔ∏è No apareci√≥ di√°logo de T√©rminos, se omite ‚ÄúAceptar‚Äù.");
  }
  await snap(page, "despu√©s-aceptar");

  // 13) Limpiar cookies / localStorage
  await page.evaluate(() => {
    document.cookie.split(";").forEach(c => {
      document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
    });
    window.localStorage.clear();
    window.sessionStorage.clear();
  });

  // 14) Rellenar campo ‚ÄúN√∫mero de Documento‚Äù (c√©dula)
  console.log("‚úçÔ∏è Rellenando C√©dula‚Ä¶");
  await page.waitForSelector('input[name="cedula"], input[id="cedula"], input[type="text"]', {
    visible: true,
    timeout: 30000
  });
  const inputCedula = await page.$('input[name="cedula"], input[id="cedula"], input[type="text"]');
  await inputCedula.click({ force: true });
  await inputCedula.type(CEDULA, { delay: 100 });

  // 15) Deshabilitar pointer-events sobre un posible reCAPTCHA
  await page.addStyleTag({
    content: `iframe[title*="reCAPTCHA"] { pointer-events: none !important; }`
  });

  // 16) Pulsar bot√≥n ‚ÄúConsultar‚Äù / ‚ÄúSiguiente‚Äù
  console.log("üñ±Ô∏è Buscando bot√≥n ‚ÄúConsultar‚Äù o ‚ÄúSiguiente‚Äù (Paso 1)‚Ä¶");
  await page.waitForFunction(
    () => Array.from(document.querySelectorAll("button")).some(b => {
      const t = b.innerText.trim();
      return t === "Consultar" || t === "Siguiente";
    }),
    { timeout: 15000 }
  );
  let btnPaso1 = null;
  for (const btn of await page.$$("button")) {
    const t = await page.evaluate(e => e.innerText.trim(), btn);
    if (t === "Consultar" || t === "Siguiente") {
      btnPaso1 = btn;
      break;
    }
  }
  if (!btnPaso1) {
    console.error("‚ùå No pude encontrar el bot√≥n ‚ÄúConsultar‚Äù/‚ÄúSiguiente‚Äù en el paso 1.");
    await browser.close();
    process.exit(1);
  }
  await btnPaso1.click({ force: true });
  console.log("‚úÖ Clic en Paso 1 (‚ÄúConsultar‚Äù/‚ÄúSiguiente‚Äù).");
  await new Promise(r => setTimeout(r, 500));  // <--- Reemplazo aqu√≠

  // 17) Resolver reCAPTCHA de Paso 1 (si aparece)
  const iframeRec1 = await page.$('iframe[src*="api2/anchor"], iframe[src*="api2/bframe"]');
  if (iframeRec1) {
    console.log("ü§ñ Resolviendo reCAPTCHA invisible de Paso 1‚Ä¶");
    const { solved, error } = await page.solveRecaptchas();
    if (error) console.warn("‚ö†Ô∏è Error al resolver reCAPTCHA paso 1:", error);
    console.log("‚úîÔ∏è reCAPTCHA paso 1 solucionado:", solved);
  } else {
    console.log("‚ÑπÔ∏è No apareci√≥ reCAPTCHA invisible en Paso 1.");
  }

  // 18) Rellenar ‚ÄúMotivo de Consulta‚Äù (textarea)
  console.log("‚úçÔ∏è Rellenando textarea ‚ÄúMotivo de Consulta‚Äù‚Ä¶");
  await page.waitForSelector("textarea", { visible: true, timeout: 30000 });
  const textarea = await page.$("textarea");
  await textarea.click({ force: true });
  await textarea.type("Chequeo para UFA", { delay: 50 });
  await new Promise(r => setTimeout(r, 300));  // <--- Reemplazo aqu√≠

  // 19) Limpiar cookies/localStorage otra vez
  await page.evaluate(() => {
    document.cookie.split(";").forEach(c => {
      document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
    });
    window.localStorage.clear();
    window.sessionStorage.clear();
  });

  // 20) Deshabilitar pointer-events sobre reCAPTCHA en Paso 2
  await page.addStyleTag({
    content: `iframe[title*="reCAPTCHA"] { pointer-events: none !important; }`
  });

  // 21) Pulsar ‚ÄúVisualizar Certificado‚Äù / ‚ÄúGenerar Certificado‚Äù / ‚ÄúSiguiente‚Äù (Paso 2)
  console.log("üñ±Ô∏è Buscando bot√≥n ‚ÄúVisualizar Certificado‚Äù o ‚ÄúSiguiente‚Äù (Paso 2)‚Ä¶");
  await page.waitForFunction(
    () => Array.from(document.querySelectorAll("button")).some(b => {
      const t = b.innerText.trim();
      return t === "Visualizar Certificado" || t === "Siguiente" || t === "Generar Certificado";
    }),
    { timeout: 15000 }
  );
  let btnPaso2 = null;
  for (const btn of await page.$$("button")) {
    const t = await page.evaluate(e => e.innerText.trim(), btn);
    if (t === "Visualizar Certificado" || t === "Siguiente" || t === "Generar Certificado") {
      btnPaso2 = btn;
      break;
    }
  }
  if (!btnPaso2) {
    console.error("‚ùå No pude encontrar el bot√≥n ‚ÄúVisualizar Certificado‚Äù/‚ÄúSiguiente‚Äù en el paso 2.");
    await browser.close();
    process.exit(1);
  }
  await btnPaso2.click({ force: true });
  console.log("‚úÖ Clic en Paso 2 (‚ÄúVisualizar Certificado‚Äù/‚ÄúSiguiente‚Äù).");
  await new Promise(r => setTimeout(r, 500));  // <--- Reemplazo aqu√≠

  // 22) Resolver reCAPTCHA de Paso 2 (si aparece)
  const iframeRec2 = await page.$('iframe[src*="api2/anchor"], iframe[src*="api2/bframe"]');
  if (iframeRec2) {
    console.log("ü§ñ Resolviendo reCAPTCHA invisible de Paso 2‚Ä¶");
    const { solved, error } = await page.solveRecaptchas();
    if (error) console.warn("‚ö†Ô∏è Error al resolver reCAPTCHA paso 2:", error);
    console.log("‚úîÔ∏è reCAPTCHA paso 2 solucionado:", solved);
  } else {
    console.log("‚ÑπÔ∏è No apareci√≥ reCAPTCHA invisible en Paso 2.");
  }

  // 23) Esperar a que aparezca el texto ‚ÄúPosee Antecedentes‚Äù en pantalla
  console.log("‚è≥ Esperando el resultado final ‚ÄúPosee Antecedentes‚Äù‚Ä¶");
  await page.waitForFunction(
    () => Array.from(document.querySelectorAll("div, span, b")).some(el => {
      return el.innerText.trim().startsWith("Posee Antecedentes");
    }),
    { timeout: 30000 }
  );
  const textoFinal = await page.evaluate(() => {
    const nodos = Array.from(document.querySelectorAll("div, span, b"));
    for (const el of nodos) {
      const t = el.innerText.trim();
      if (t.startsWith("Posee Antecedentes")) {
        return t;
      }
    }
    return "";
  });

  let resultado = "No";
  if (textoFinal.toLowerCase().includes("s√≠")) resultado = "Si";
  console.log("üéØ Resultado final:", resultado);

  // 24) Cerrar navegador y salir
  await browser.close();
  process.exit(0);
}

main().catch(err => {
  console.error("‚ùå Error no controlado:", err);
  process.exit(1);
});
